fp = paste0(
"/Users/jonathanstorey/Documents/Work/Projects/SURROGATE_MODELING/Rcode/",
"TEST_SCRIPTS/VALIDATION_DATA/SFU_TEST_FUNCTIONS/drop-wave.R"
)
source(fp)
x1 = x2 = seq(-5.12, 5.12, length.out = 25)
df = expand.grid(x1, x2)
df$y = apply(df, 1, drop)
wireframe(z~x1*x2, df)
library(lattice)
wireframe(z~x1*x2, df)
wireframe(y~x1*x2, df)
names(df) = c("x1", "x2")
x1 = x2 = seq(-5.12, 5.12, length.out = 25)
df = expand.grid(x1, x2)
names(df) = c("x1", "x2")
df$y = apply(df, 1, drop)
wireframe(y~x1*x2, df)
x1 = x2 = seq(-5.12, 5.12, length.out = 50)
df = expand.grid(x1, x2)
names(df) = c("x1", "x2")
df$y = apply(df, 1, drop)
wireframe(y~x1*x2, df)
?wireframe
trellis.par.get()
temp = trellis.par.get()
temp$box.rectangle
temp$box.3d
trellis.par.set("box.3d", list(col = "transparent"))
wireframe(y~x1*x2, df)
temp$axis.components
temp$axis.line
trellis.par.set("axis.line", list(col = "transparent"))
wireframe(y~x1*x2, df)
temp$axis.text
trellis.par.set("axis.text", list(col = "transparent"))
wireframe(y~x1*x2, df)
trellis.par.set("box.3d", list(col = "transparent"))
trellis.par.set("axis.line", list(col = "transparent"))
trellis.par.set("axis.text", list(col = "transparent"))
wireframe(y~x1*x2, df)
temp$par.xlab.text
trellis.par.set("par.xlab.text", list(col = "transparent"))
wireframe(y~x1*x2, df)
trellis.par.set("par.ylab.text", list(col = "transparent"))
trellis.par.set("par.zlab.text", list(col = "transparent"))
wireframe(y~x1*x2, df)
# Define parameters for iterations ---------------------------------------------
step_size = 0.1
init_size = 0.5
res = 50
# Initialize a list top store the data
data_list = list()
# Begin loop -------------------------------------------------------------------
cond = TRUE
i = 0
while(cond) {
index1 = -init_size - i*step_size
index2 = init_size + i*step_size
x1 = x2 = seq(from = index1, to = index2, length.out = res)
df = expand.grid(x1 = x1, x2 = x2)
df$y = df$y = apply(df, 1, drop)
data_list = c(data_list, list(df))
if (index2 > 5.12) {
cond = FALSE
}
}
i = 0
while(cond) {
index1 = -init_size - i*step_size
index2 = init_size + i*step_size
x1 = x2 = seq(from = index1, to = index2, length.out = res)
df = expand.grid(x1 = x1, x2 = x2)
df$y = df$y = apply(df, 1, drop)
data_list = c(data_list, list(df))
i = i + 1
if (index2 > 5.12) {
cond = FALSE
}
}
saveRDS(data_list, "data-list.RDS")
data_list = readRDS("data-list.RDS")
n = length(data_list)
i = 1
df = data_list[[i]]
trellis.par.set("box.3d", list(col = "transparent"))
trellis.par.set("axis.line", list(col = "transparent"))
trellis.par.set("par.xlab.text", list(col = "transparent"))
trellis.par.set("par.ylab.text", list(col = "transparent"))
trellis.par.set("par.zlab.text", list(col = "transparent"))
wireframe(y~x1*x2, df)
i = 2
df = data_list[[i]]
trellis.par.set("box.3d", list(col = "transparent"))
trellis.par.set("axis.line", list(col = "transparent"))
trellis.par.set("par.xlab.text", list(col = "transparent"))
trellis.par.set("par.ylab.text", list(col = "transparent"))
trellis.par.set("par.zlab.text", list(col = "transparent"))
wireframe(y~x1*x2, df)
i = 5
df = data_list[[i]]
trellis.par.set("box.3d", list(col = "transparent"))
trellis.par.set("axis.line", list(col = "transparent"))
trellis.par.set("par.xlab.text", list(col = "transparent"))
trellis.par.set("par.ylab.text", list(col = "transparent"))
trellis.par.set("par.zlab.text", list(col = "transparent"))
wireframe(y~x1*x2, df)
i = 50
df = data_list[[i]]
trellis.par.set("box.3d", list(col = "transparent"))
trellis.par.set("axis.line", list(col = "transparent"))
trellis.par.set("par.xlab.text", list(col = "transparent"))
trellis.par.set("par.ylab.text", list(col = "transparent"))
trellis.par.set("par.zlab.text", list(col = "transparent"))
wireframe(y~x1*x2, df)
i = 100
df = data_list[[i]]
head(df)
i = 1
df = data_list[[i]]
head(df)
i = 1
index1 = -init_size - i*step_size
index2 = init_size + i*step_size
index1
index2
suppressMessages({
library(tidyverse)
})
fp = paste0(
"/Users/jonathanstorey/Documents/Work/Projects/SURROGATE_MODELING/Rcode/",
"TEST_SCRIPTS/VALIDATION_DATA/SFU_TEST_FUNCTIONS/drop-wave.R"
)
source(fp)
# Define parameters for iterations ---------------------------------------------
step_size = 0.1
init_size = 0.5
res = 50
# Initialize a list top store the data
data_list = list()
# Begin loop -------------------------------------------------------------------
cond = TRUE
i = 0
while(cond) {
index1 = -init_size - i*step_size
index2 = init_size + i*step_size
x1 = x2 = seq(from = index1, to = index2, length.out = res)
df = expand.grid(x1 = x1, x2 = x2)
df$y = df$y = apply(df, 1, drop)
data_list = c(data_list, list(df))
i = i + 1
if (index2 > 5.12) {
cond = FALSE
}
}
saveRDS(data_list, "data-list.RDS")
head(data_list[[1]])
head(data_list[[2]])
head(data_list[[3]])
i = 1
df = data_list[[i]]
trellis.par.set("box.3d", list(col = "transparent"))
trellis.par.set("axis.line", list(col = "transparent"))
trellis.par.set("par.xlab.text", list(col = "transparent"))
trellis.par.set("par.ylab.text", list(col = "transparent"))
trellis.par.set("par.zlab.text", list(col = "transparent"))
wireframe(y~x1*x2, df)
i = 10
df = data_list[[i]]
trellis.par.set("box.3d", list(col = "transparent"))
trellis.par.set("axis.line", list(col = "transparent"))
trellis.par.set("par.xlab.text", list(col = "transparent"))
trellis.par.set("par.ylab.text", list(col = "transparent"))
trellis.par.set("par.zlab.text", list(col = "transparent"))
wireframe(y~x1*x2, df)
i = 2
df = data_list[[i]]
trellis.par.set("box.3d", list(col = "transparent"))
trellis.par.set("axis.line", list(col = "transparent"))
trellis.par.set("par.xlab.text", list(col = "transparent"))
trellis.par.set("par.ylab.text", list(col = "transparent"))
trellis.par.set("par.zlab.text", list(col = "transparent"))
wireframe(y~x1*x2, df)
i = 3
i = 1
df = data_list[[i]]
trellis.par.set("box.3d", list(col = "transparent"))
trellis.par.set("axis.line", list(col = "transparent"))
trellis.par.set("par.xlab.text", list(col = "transparent"))
trellis.par.set("par.ylab.text", list(col = "transparent"))
trellis.par.set("par.zlab.text", list(col = "transparent"))
wireframe(y~x1*x2, df)
i = 2
df = data_list[[i]]
trellis.par.set("box.3d", list(col = "transparent"))
trellis.par.set("axis.line", list(col = "transparent"))
trellis.par.set("par.xlab.text", list(col = "transparent"))
trellis.par.set("par.ylab.text", list(col = "transparent"))
trellis.par.set("par.zlab.text", list(col = "transparent"))
wireframe(y~x1*x2, df)
suppressMessages({
library(tidyverse)
})
fp = paste0(
"/Users/jonathanstorey/Documents/Work/Projects/SURROGATE_MODELING/Rcode/",
"TEST_SCRIPTS/VALIDATION_DATA/SFU_TEST_FUNCTIONS/drop-wave.R"
)
source(fp)
# Define parameters for iterations ---------------------------------------------
step_size = 0.01
init_size = 0.5
res = 50
# Initialize a list top store the data
data_list = list()
# Begin loop -------------------------------------------------------------------
cond = TRUE
i = 0
while(cond) {
index1 = -init_size - i*step_size
index2 = init_size + i*step_size
x1 = x2 = seq(from = index1, to = index2, length.out = res)
df = expand.grid(x1 = x1, x2 = x2)
df$y = df$y = apply(df, 1, drop)
data_list = c(data_list, list(df))
i = i + 1
if (index2 > 1.00) {
cond = FALSE
}
}
saveRDS(data_list, "data-list.RDS")
suppressMessages({
library(tidyverse)
})
fp = paste0(
"/Users/jonathanstorey/Documents/Work/Projects/SURROGATE_MODELING/Rcode/",
"TEST_SCRIPTS/VALIDATION_DATA/SFU_TEST_FUNCTIONS/drop-wave.R"
)
source(fp)
# Define parameters for iterations ---------------------------------------------
step_size = 0.001
init_size = 0.5
res = 50
# Initialize a list top store the data
data_list = list()
# Begin loop -------------------------------------------------------------------
cond = TRUE
i = 0
while(cond) {
index1 = -init_size - i*step_size
index2 = init_size + i*step_size
x1 = x2 = seq(from = index1, to = index2, length.out = res)
df = expand.grid(x1 = x1, x2 = x2)
df$y = df$y = apply(df, 1, drop)
data_list = c(data_list, list(df))
i = i + 1
if (index2 > 1.00) {
cond = FALSE
}
}
saveRDS(data_list, "data-list.RDS")
library(lattice)
data_list = readRDS("data-list.RDS")
n = length(data_list)
dir.create("IMAGES") # Create a temporay directory
png(file = "IMAGES/ts%03d.png", width = 800, height = 600)
for (i in 1:n) {
df = data_list[[i]]
trellis.par.set("box.3d", list(col = "transparent"))
trellis.par.set("axis.line", list(col = "transparent"))
trellis.par.set("par.xlab.text", list(col = "transparent"))
trellis.par.set("par.ylab.text", list(col = "transparent"))
trellis.par.set("par.zlab.text", list(col = "transparent"))
wireframe(y~x1*x2, df)
}
invisible(dev.off())
unlink("IMAGES", recursive = T)
